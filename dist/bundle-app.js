(()=>{"use strict";class e{constructor(e){this._value=e}get value(){return this._value}}const t=new class{constructor(){this.cardsTemplate=[new e("A"),new e("A"),new e("B"),new e("B"),new e("C"),new e("C"),new e("D"),new e("D"),new e("E"),new e("E"),new e("F"),new e("F"),new e("G"),new e("G"),new e("H"),new e("H")]}compareCards(e,t,s){return e[t].value===e[s].value}shuffleCards(){let e,t=[],s=[];for(;s.length!==this.cardsTemplate.length;)e=Math.floor(this.cardsTemplate.length*Math.random()),t.includes(e)||(t.push(e),s.push(this.cardsTemplate[e]));return s}},s=new class{constructor(){this.time=null,this.timeMin=0,this.timeSec=0,this.timer=document.getElementsByClassName("timer")[0],this.moveCounter=document.getElementsByClassName("moves")[0]}clearBoard(){const e=document.getElementsByClassName("cards")[0];if(e.childElementCount>0)for(;e.firstChild;)e.removeChild(e.firstChild)}buildBoard(e){this.clearBoard();const t=document.getElementsByClassName("cards")[0];e.forEach(((e,s)=>{const i=document.createElement("li");i.setAttribute("id",`${s}`),i.setAttribute("class","card");const a=document.createElement("span");a.setAttribute("class","parag"),a.innerHTML=e.value,i.appendChild(a),t.appendChild(i)}))}cardFaceUp(e){document.getElementById(e).setAttribute("class","card awers")}cardFaceDown(e){document.getElementById(e).setAttribute("class","card rewers")}matchCards(e,t){const s=document.getElementById(e),i=document.getElementById(t);s.setAttribute("class","card matched"),i.setAttribute("class","card matched")}isMatched(e){return document.getElementById(e).getAttribute("class").includes("matched")}updateMovesCounter(e){this.moveCounter.innerHTML=`${e} moves`}resetMovesCounter(){this.moveCounter.innerHTML="0 moves"}startTime(){this.stopTime(),this.timeMin=0,this.timeSec=0,this.timer.innerHTML=`${this.timeMin}:${this.timeSec}`,this.time=setInterval(this.updateTime,1e3,this)}stopTime(){this.time&&(clearInterval(this.time),this.time=null)}updateTime(e){e.timeSec+=1,e.timeSec>=60&&(e.timeSec=0,e.timeMin+=1),e.timer.innerHTML=`${e.timeMin}:${e.timeSec}`}disableRestartButton(){document.getElementsByClassName("restart")[0].disabled=!0}enableRestartButton(){document.getElementsByClassName("restart")[0].disabled=!1}showWinBoard(e,t){this.disableRestartButton(),this.blurGame(),this.stopTime();const s=document.getElementById("timer"),i=document.getElementById("moves");s.innerHTML=`${this.timeMin}:${this.timeSec}`,i.innerHTML=`${t}`;const a=document.getElementsByClassName("win-button")[0];a.game=e,a.addEventListener("click",this.setup),document.getElementsByClassName("win-board")[0].setAttribute("style","display: flex;")}blurGame(){document.getElementsByClassName("game")[0].setAttribute("style","-webkit-filter: blur(12px);")}setup(e){document.getElementsByClassName("win-board")[0].setAttribute("style","display: none;"),document.getElementsByClassName("game")[0].setAttribute("style","-webkit-filter: none;"),e.target.game.startNewGame()}},i=new class{constructor(){this.board=null,this.userInterface=null,this.cards=[],this.moves=0,this.flips=0,this.matchedPairs=0,this.firstCard=void 0,this.gameProgress=!1}sleep(e){return new Promise((t=>setTimeout(t,e)))}setBoard(e){this.board=e}setUI(e){this.userInterface=e}startNewGame(){this.moves=0,this.flips=0,this.matchedPairs=0,this.firstCard=void 0,this.cards=this.board.shuffleCards(),this.userInterface.resetMovesCounter(),this.userInterface.buildBoard(this.cards),this.userInterface.enableRestartButton(),this.userInterface.startTime()}checkProspect(e){return!(null===e||this.firstCard===e||this.userInterface.isMatched(e)||this.flips>1)}async turn(e){return!!this.checkProspect(e)&&(this.userInterface.cardFaceUp(e),this.flips+=1,1===this.flips?this.firstCard=e:(this.moves+=1,this.userInterface.updateMovesCounter(this.moves),this.board.compareCards(this.cards,this.firstCard,e)?this.cardsMatched(this.firstCard,e):this.cardsNotMatched(this.firstCard,e)),this.matchedPairs>=8&&(this.userInterface.stopTime(),await this.sleep(2e3),this.userInterface.showWinBoard(this,this.moves),!0))}async cardsMatched(e,t){this.matchedPairs+=1,await this.sleep(600),this.userInterface.matchCards(e,t),this.firstCard=void 0,this.flips=0}async cardsNotMatched(e,t){await this.sleep(1e3),this.userInterface.cardFaceDown(e),this.userInterface.cardFaceDown(t),this.firstCard=void 0,this.flips=0}};i.setBoard(t),i.setUI(s),i.startNewGame(),document.getElementsByClassName("cards")[0].addEventListener("click",(e=>{i.turn(e.target.getAttribute("id"))})),document.getElementsByClassName("restart")[0].addEventListener("click",(e=>{i.startNewGame()}))})();